#!/usr/bin/env bun

import * as core from "@actions/core";
import * as github from "@actions/github";
import { Octokit } from "@octokit/rest";
import { $ } from "bun";
import os from "os";
import path from "path";

const { owner, repo } = github.context.repo;
const actor = github.context.actor;
const buildCommand = process.env.INPUT_COMMAND as string;
const maxAttempts = parseInt(process.env.INPUT_MAX_ATTEMPTS || "3");
const model = process.env.INPUT_MODEL || "anthropic/claude-sonnet-4-20250514";

if (!buildCommand) {
  core.setFailed("INPUT_COMMAND is required");
  process.exit(1);
}



let appToken: string;
let octoRest: Octokit;
let gitCredentials: string;

async function run() {
  try {
    appToken = process.env.GITHUB_TOKEN!;
    if (!appToken) {
      throw new Error("GITHUB_TOKEN environment variable is not set");
    }

    octoRest = new Octokit({ auth: appToken });
    await configureGit(appToken);
    await assertPermissions();

    console.log("BuildMedic: CI self-healing agent started");
    console.log(`Command: ${buildCommand}`);
    console.log(`Max attempts: ${maxAttempts}`);

    // Create a branch for the agent to work on
    const runId = process.env.GITHUB_RUN_ID!;
    const branch = `buildmedic/fix-build-${runId}`;
    console.log(`Creating branch: ${branch}`);
    await $`git checkout -b ${branch}`;

    // Let opencode handle everything - command execution, retries, and fixes
    const prompt = buildSelfHealingPrompt({buildCommand, maxAttempts});
    const response = await runOpencode(prompt, { share: false });

    await restoreGitConfig();

  } catch (e: any) {
    await restoreGitConfig();
    console.error(e);
    let msg = e;
    if (e instanceof $.ShellError) {
      msg = e.stderr.toString();
    } else if (e instanceof Error) {
      msg = e.message;
    }
    core.setFailed(`BuildMedic failed with error: ${msg}`);
    process.exit(1);
  }
}

if (import.meta.main) {
  run();
}

async function generateGitHubToken() {
  try {
    return await core.getIDToken("buildmedic-github-action");
  } catch (error) {
    console.error("Failed to get OIDC token:", error);
    throw new Error(
      "Could not fetch an OIDC token. Make sure to add `id-token: write` to your workflow permissions.",
    );
  }
}

async function exchangeForAppToken(oidcToken: string) {
  const response = await fetch(
    "https://api.frank.dev.opencode.ai/exchange_github_app_token",
    {
      method: "POST",
      headers: {
        Authorization: `Bearer ${oidcToken}`,
      },
    },
  );

  if (!response.ok) {
    const responseJson = (await response.json()) as { error?: string };
    throw new Error(
      `App token exchange failed: ${response.status} ${response.statusText} - ${responseJson.error}`,
    );
  }

  const responseJson = (await response.json()) as { token: string };
  return responseJson.token;
}

function buildSelfHealingPrompt(opts: { buildCommand: string; maxAttempts: number }): string {
  const { buildCommand, maxAttempts } = opts;
  return `You are our CI self‑healing agent.

**Workflow**
- Run the build once, run this command as your first action, exactly as follows:
  \`\`\`
  ${buildCommand}
  \`\`\`
- If the commands succeed, exit immediately with success—no commits, no PR. If you are not able to run the command, fail the job, exit with code 1.
- Otherwise, iterate up to **${maxAttempts} attempts**:
  - Diagnose & edit code.
  - \`git add -A && git commit -m "fix(build): attempt $ATTEMPT"\`.
  - Re‑run \`${buildCommand}\`. You can also run only part of the command if only that part is currently failing.
- After ${maxAttempts} failed attempts, \`exit 1\` so the job fails.

**When the build passes**
- First add and commit your changes:
  \`\`\`bash
  git status
  git add -A # or only add some specific files if some changes are unrelated
  git commit -m "fix(build): your commit message"
  \`\`\`
- Push the branch and create a PR using the buildmedic cli. ALWAYS call buildmedic cli if you want to push your changes:
  \`\`\`bash
  git push -u origin HEAD
  buildmedic --title "fix(build): short summary of what was fixed" --message "Automated patch generated by BuildMedic 🛠️\\n\\nExplanation of what was the issue and how it was fixed"
  \`\`\`

if you manage to fix the build command, ALWAYS call the buildmedic cli to submit the commits with your fixes

if you did not manage to fix the build command, call \`exit 1\` to fail the job and DO NOT use the buildmedic cli.
}


async function configureGit(appToken: string) {
  console.log("Configuring git...");
  const config = "http.https://github.com/.extraheader";
  const ret = await $`git config --local --get ${config}`;
  gitCredentials = ret.stdout.toString().trim();

  const newCredentials = Buffer.from(
    `x-access-token:${appToken}`,
    "utf8",
  ).toString("base64");

  await $`git config --local --unset-all ${config}`;
  await $`git config --local ${config} "AUTHORIZATION: basic ${newCredentials}"`;
  await $`git config --global user.name "buildmedic[bot]"`;
  await $`git config --global user.email "buildmedic[bot]@users.noreply.github.com"`;
}


async function restoreGitConfig() {
  if (!gitCredentials) return;
  const config = "http.https://github.com/.extraheader";
  await $`git config --local ${config} "${gitCredentials}"`;
}

async function assertPermissions() {
  console.log(`Asserting permissions for user ${actor}...`);

  let permission;
  try {
    const response = await octoRest.repos.getCollaboratorPermissionLevel({
      owner,
      repo,
      username: actor,
    });

    permission = response.data.permission;
    console.log(`  permission: ${permission}`);
  } catch (error) {
    console.error(`Failed to check permissions: ${error}`);
    throw new Error(`Failed to check permissions for user ${actor}: ${error}`);
  }

  if (!["admin", "write"].includes(permission))
    throw new Error(`User ${actor} does not have write permissions`);
}


async function runOpencode(
  prompt: string,
  opts?: {
    share?: boolean;
  },
) {
  console.log("Running opencode...");

  const promptPath = path.join(os.tmpdir(), "PROMPT");
  await Bun.write(promptPath, prompt);
  const ret = await $`cat ${promptPath} | opencode run -m ${
    model
  } ${opts?.share ? "--share" : ""}`;
  return {
    stdout: ret.stdout.toString().trim(),
    stderr: ret.stderr.toString().trim(),
  };
}

async function branchIsDirty() {
  console.log("Checking if branch is dirty...");
  const ret = await $`git status --porcelain`;
  return ret.stdout.toString().trim().length > 0;
}
